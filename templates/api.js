/* global fetch URLSearchParams Headers */
"use strict"

/*!
 * Generated by:
 * 	 Get Multicolour https://getmulticolour.com
 * 	 Multicolour JavaScript SDK 0.0.1
 *
 * A collection of functions that perform the request to
 * the API and validation/sanitation based on your models.
 *
 * Copyright Get Multicolour https://getmulticolour.com 2016
 */
class API {

  static query_string(search) {
    const qs = new URLSearchParams()
    for (let key in search) qs.append(key, search[key])
    return qs
  }

  constructor() {
    this.headers = new Headers({
      "Content-Type": "application/json"
    })
  }

  negotiate(content_type) {
    this.headers.delete("Content-Type")
    this.headers.append("Content-Type", content_type)
    return this
  }

  /**
   * Validate a payload against our schema.
   * @param  {Object} payload to validate.
   * @return {Object}
   */
  validate(payload) {
    return this.schema.validate(payload)
  }

  /**
   * Fire off a request.
   * @param  {String} url to fetch.
   * @param  {Object} options to send with the request.
   * @return {Promise} fetch promise.
   */
  fetch(url, options = {}) {
    // Get the schema name from the url.
    const schema = url.split("/")[0]

    // Return a promise wrapper around the original fetch api.
    return new Promise((reject, resolve) => {
      // If we have a payload, validate it against the model.
      if (options.body) {
        const validation = this.validate(options.body)

        // Check for errors and reject the promise.
        if (validation.error) {
          return reject(validation.error)
        }
        else {
          options.body = JSON.stringify(options.body)
        }
      }

      // Add the headers to the options.
      options.headers = this.headers

      // Return the method.
      return fetch(url, options)
        .then(resolve)
        .catch(reject)
    })
  }

  // Alias post to create for the die-hards.
  get post() {
    return this.create
  }

  get(search) {
    const qs = API.query_string(search)
    return this.fetch(`${this.root}?${qs}`)
  }

  create(payload) {
    return this.fetch(this.root, {
      method: "POST",
      body: payload
    })
  }

  update(search, payload) {
    const qs = API.query_string(search)
    return this.fetch(`${this.root}?${qs}`, {
      method: "PATCH",
      body: payload
    })
  }

  update_or_create(search, payload) {
    const qs = API.query_string(search)
    return this.fetch(`${this.root}?${qs}`, {
      method: "PUT",
      body: payload
    })
  }

  delete(search) {
    const qs = API.query_string(search)
    return this.fetch(`${this.root}?${qs}`, {
      method: "DELETE"
    })
  }
}

export default API
